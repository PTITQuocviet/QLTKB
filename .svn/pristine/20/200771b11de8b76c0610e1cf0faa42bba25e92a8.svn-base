import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { environment } from 'src/environments/environment';

import { HttpClient } from '@angular/common/http';
import { tap } from 'rxjs/operators';

import { ResultPagging } from "../shared/model/result-pagging.model";
import { PaggingService } from "../pagging/pagging.service";
import { ModelModel } from "./model.model";

@Injectable({ providedIn: 'root' })
export class ModelService {

    /** chứa thông tin kết quả tìm kiếm và thông tin phân trang */
    resultPagging = new BehaviorSubject<ResultPagging>(null);

    constructor(
        private http: HttpClient,
        private paggingService: PaggingService
    ) { }

    /**Lấy thông tin chi tiết của 1 model theo id */
    request(id: string) {
        //TODO kiểm tra id hợp lệ
        const url = new URL(environment.baseURL + environment.apiProject + '/' + id);

        return this.http.get<ModelModel>(url.href);
    }

    /** tạo request tìm kiếm project */
    requestSearch(page: number) {//TODO thêm tham số là object chứa thông tin tìm kiếm
        //tham số tìm kiếm null là tìm tất cả project
        const url = new URL(environment.baseURL + environment.apiProject);
        const pagging = this.paggingService.pagging.getValue();
        // const startRow: number = (page - 1) * pagging.rowPerPage;

        //TODO set các tham số tìm kiếm
        if (!pagging.currentPage) {
            pagging.currentPage = 1;
        }

        url.searchParams.set('start', ((pagging.currentPage - 1) * pagging.rowPerPage).toString());
        url.searchParams.set('rows', pagging.rowPerPage.toString());

        return this.http.get<ResultPagging>(url.href).pipe(
            tap(
                resultPagging => {
                    pagging.countRow = resultPagging.numFound;
                    pagging.currentPage = resultPagging.start / pagging.rowPerPage + 1;
                    this.paggingService.pagging.next(pagging);//cập nhật giá trị phân trang sau khi truy vấn tìm kiếm
                    this.resultPagging.next(resultPagging);//cập nhật kết quả tìm kiếm
                }
            )
        )
    }

    /** Tạo request tạo model */
    requestCreate(models: ModelModel) {
        const url = new URL(environment.baseURL + environment.apiProject);

        return this.http.post<ResultPagging>(url.href, models);
    }
    
}