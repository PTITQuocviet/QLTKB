import { Injectable } from "@angular/core";
import { BehaviorSubject, Observable } from "rxjs";
import { tap } from "rxjs/operators";
import { environment } from "src/environments/environment";
import { HttpClient, HttpHeaders } from '@angular/common/http';

import { ResultPagging } from "../shared/model/result-pagging.model";
import { PaggingModel } from "../shared/model/pagging.model";
import { FeatureSetModel } from "./feature-set.model";
import { FeatureSetSearchParamModel } from "./feature-set-search-param.model";

@Injectable({ providedIn: 'root' })
export class FeatureSetService {

    /** chứa thông tin kết quả tìm kiếm và thông tin phân trang */
    resultPagging = new BehaviorSubject<ResultPagging>(null);

    baseURL: string;

    constructor(
        private http: HttpClient
    ) {
        this.baseURL = environment.baseURL + environment.apiFeatureSet;
    }

    /** tạo request tìm kiếm  */
    requestSearch(pagging: PaggingModel, searchParam: FeatureSetSearchParamModel): Observable<ResultPagging> {
        const url = new URL(this.baseURL.replace(':prj_id', searchParam.projectId));

        for (const [key, value] of Object.entries(searchParam)) {
            if (value
                && value.length > 0
                && key !== 'projectId'//tham số này đã được cho vào path param
            ) {
                url.searchParams.set(key, value);
            }
        }

        if (pagging) {//nếu có phân trang thì pipe
            if (!pagging.currentPage) {
                pagging.currentPage = 1;
            }
    
            url.searchParams.set('start', ((pagging.currentPage - 1) * pagging.rowPerPage).toString());
            url.searchParams.set('rows', pagging.rowPerPage.toString());
    
            return this.http.get<ResultPagging>(url.href).pipe(
                tap(
                    resultPagging => {
                        pagging.countRow = resultPagging.numFound;
                        pagging.currentPage = resultPagging.start / pagging.rowPerPage + 1;
                        this.resultPagging.next(resultPagging);//cập nhật kết quả tìm kiếm
                    }
                )
            );
        }

        url.searchParams.set('start', '0');
        url.searchParams.set('rows', '500');//limit
        return this.http.get<ResultPagging>(url.href);
    }

    /**tìm kiếm và export dạng csv */
    requestSearchExport(searchParam: FeatureSetSearchParamModel): Observable<string> {
        const headers = new HttpHeaders().set('Content-Type', 'text/plain; charset=utf-8');
        const url = new URL(this.baseURL.replace(':prj_id', searchParam.projectId) + '/export');

        for (const [key, value] of Object.entries(searchParam)) {
            if (value
                && value.length > 0
                && key !== 'projectId'//tham số này đã được cho vào path param
            ) {
                url.searchParams.set(key, value);
            }
        }

        url.searchParams.set('start', '0');
        url.searchParams.set('rows', '500');//giới hạn export

        return this.http.get(url.href, { headers, responseType: 'text' });//không thể dùng get<U>(), phải dùng get()
    }

    /** Tạo request tạo */
    requestCreate(featureSet: FeatureSetModel) {
        const url = new URL(this.baseURL.replace(':prj_id', featureSet.project.id));

        return this.http.post<FeatureSetModel>(url.href, featureSet);
    }

    /** Tạo request xóa */
    requestDelete(featureSet: FeatureSetModel) {
        const url = new URL(this.baseURL.replace(':prj_id', featureSet.project.id) + '/' + featureSet.id);

        return this.http.delete<FeatureSetModel>(url.href);
    }
}