import { Injectable } from "@angular/core";
import { BehaviorSubject, Observable } from "rxjs";
import { tap } from "rxjs/operators";
import { environment } from "src/environments/environment";
import { HttpClient } from '@angular/common/http';

import { ResultPagging } from "../shared/model/result-pagging.model";
import { PaggingModel } from "../shared/model/pagging.model";
import { UserSearchParamModel } from "./user-search-param.model";
import {UserModel} from "./user.model";

@Injectable({ providedIn: 'root' })
export class UserService {

    /** chứa thông tin kết quả tìm kiếm và thông tin phân trang */
    resultPagging = new BehaviorSubject<ResultPagging>(null);

    baseURL: string;

    constructor(
        private http: HttpClient
    ) {
        this.baseURL = environment.baseURL + environment.apiUser ;
    }

    /** tạo request tìm kiếm  */
    requestSearch(pagging: PaggingModel, searchParam: UserSearchParamModel): Observable<ResultPagging> {
        const url = new URL(this.baseURL);

        // for (const [key, value] of Object.entries(searchParam)) {
        //     if (value
        //         && value.length > 0
        //         && key !== ':prj_id'//tham số này đã được cho vào path param
        //     ) {
        //         url.searchParams.set(key, value);
        //     }
        // }

        // if (!pagging.currentPage) {
        //     pagging.currentPage = 1;
        // }

        url.searchParams.set('start', ((pagging.currentPage - 1) * pagging.rowPerPage).toString());
        url.searchParams.set('rows', pagging.rowPerPage.toString());

        return this.http.get<ResultPagging>(url.href).pipe(
            tap(
                resultPagging => {
                    pagging.countRow = resultPagging.numFound;
                    pagging.currentPage = resultPagging.start / pagging.rowPerPage + 1;
                    this.resultPagging.next(resultPagging);//cập nhật kết quả tìm kiếm
                }
            )
        )
    }

      /** Tạo request xóa project */
      requestDelete(user: UserModel) {
        const url = new URL(this.baseURL+'/' + user.id);
        return this.http.delete<UserModel>(url.href);
    }

}