import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { NgForm } from '@angular/forms';
import { ModelModel } from './model.model';
import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';
import { ModelService } from './model.service';
import { PaggingModel } from '../shared/model/pagging.model';
import { PaggingService } from '../pagging/pagging.service';

@Component({
  selector: 'app-model',
  templateUrl: './model.component.html',
  styleUrls: ['./model.component.css']
})
export class ModelComponent implements OnInit {

  @ViewChild('formFilter') formFilter: NgForm;
  @ViewChild('formCreate', { static: true }) formCreate: ElementRef;
  @ViewChild('modalUploadItemRule', { static: true }) modalUploadItemRule: ElementRef;

  models: ModelModel[] = [];
  isCollapsedFilter = false;//trạng thái mở của khung filter
  closeModalResult = '';
  minSTT: number = 1;//số thứ tự nhỏ nhất. Cần cập nhật khi thay đổi trang

  constructor(
    private router: Router
    , private route: ActivatedRoute
    , private paggingService: PaggingService,
    private modelService: ModelService,
    private modalService: NgbModal,
  ) {

  }

  classString: string;

  ngOnInit(): void {
    this.models = this.getModelsDemo();
  }

  getModelsDemo() {
    const models: ModelModel[] = [];

    let model = new ModelModel();
    model.id = '00001';
    model.name = 'name 123';
    model.model = 'Single';
    model.createdUser = 'ToanLH4';
    model.startTime = (new Date()).getTime() - 123456;
    model.endTime = (new Date()).getTime();
    model.status = '1';
    model.dataset.id = '123';
    model.dataset.name = '123';
    model.featureSet.id = 456;
    models.push(model);

    model = new ModelModel();
    model.id = '00002';
    model.name = 'name 1323';
    model.model = 'Banging Ensemble';
    model.createdUser = 'ToanLH4';
    model.startTime = (new Date()).getTime() - 103456;
    model.endTime = (new Date()).getTime();
    model.status = '2';
    model.dataset.id = '123rht';
    model.dataset.name = '12wr3';
    model.featureSet.id = 4546;
    models.push(model);

    return models;
  }

  onSearch(pagging: PaggingModel) {
    // const projectId = this.route.snapshot.params['idProject'];

    if (!pagging) {
      pagging = this.paggingService.pagging.getValue();
    }
    this.minSTT = (pagging.currentPage - 1) * pagging.rowPerPage + 1;

    this.models = this.getModelsDemo();
  }

  onClearFilterForm() {
    this.formFilter.reset();
  }


  onCreateModel() {
    this.router.navigate(['project', this.route.snapshot.params['idProject'], 'model', 'create']);
  }

  private getDismissModalReason(reason: any): string {
    if (reason === ModalDismissReasons.ESC) {
      return 'by pressing ESC';
    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
      return 'by clicking on a backdrop';
    } else {
      return `with: ${reason}`;
    }
  }


  onSaveModel(form: NgForm) {
    //TODO nếu tạo lỗi thì không đóng modal
    const model = new ModelModel();

  }

}
