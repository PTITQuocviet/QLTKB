import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { map, tap } from "rxjs/operators";
import { environment } from "src/environments/environment";
import { PaggingModel } from "../shared/model/pagging.model";
import { ResultPagging } from "../shared/model/result-pagging.model";
import { DatasetDetailSearchParamModel } from "./dataset-detail-search-param.model";

@Injectable({ providedIn: 'root' })
export class DatasetDetailService {

    /** chứa thông tin kết quả tìm kiếm và thông tin phân trang */
    resultPagging = new BehaviorSubject<ResultPagging>(null);

    baseURL: string;

    constructor(
        private http: HttpClient
    ) {
        this.baseURL = environment.baseURL + environment.apiDatasetDetail;
    }

    /** tạo request tìm kiếm data-profillings */
    requestSearchDataProfilling(pagging: PaggingModel, searchParam: DatasetDetailSearchParamModel) {
        const url = new URL(this.baseURL.replace(':prj_id', searchParam.projectId).replace(':dataset_id', searchParam.datasetId) + '/data-profillings');

        for (const [key, value] of Object.entries(searchParam)) {
            if (value
                && ((typeof(value) === 'string' && value.length > 0) || (typeof(value) !== 'string'))
                && key !== 'projectId'
                && key !== 'datasetId'
            ) {
                url.searchParams.set(key, value);
            }
        }

        if (!pagging.currentPage) {
            pagging.currentPage = 1;
        }

        url.searchParams.set('start', ((pagging.currentPage - 1) * pagging.rowPerPage).toString());
        url.searchParams.set('rows', pagging.rowPerPage.toString());
        return this.http.get<ResultPagging>(url.href).pipe(
            map(resultPagging => {
                if (!resultPagging) {
                    resultPagging = new ResultPagging();
                    resultPagging.numFound = 0;
                    resultPagging.start = 0;
                }
                return resultPagging;
            })
            , tap(
                resultPagging => {
                    if (!resultPagging) {
                        resultPagging = new ResultPagging();
                        resultPagging.numFound = 0;
                        resultPagging.start = 0;
                    }
                    pagging.countRow = resultPagging.numFound;
                    pagging.currentPage = resultPagging.start / pagging.rowPerPage + 1;
                    // this.paggingService.pagging.next(pagging);//cập nhật giá trị phân trang sau khi truy vấn tìm kiếm
                    this.resultPagging.next(resultPagging);//cập nhật kết quả tìm kiếm
                }
            )
        );
    }

    /** tạo request tìm kiếm data-configs */
    requestSearchDataConfig(pagging: PaggingModel, searchParam: DatasetDetailSearchParamModel) {
        const url = new URL(this.baseURL.replace(':prj_id', searchParam.projectId).replace(':dataset_id', searchParam.datasetId) + '/data-configs');

        for (const [key, value] of Object.entries(searchParam)) {
            if (value
                && ((typeof(value) === 'string' && value.length > 0) || (typeof(value) !== 'string'))
                && key !== 'projectId'
                && key !== 'datasetId'
            ) {
                url.searchParams.set(key, value);
            }
        }

        if (!pagging.currentPage) {
            pagging.currentPage = 1;
        }

        url.searchParams.set('start', ((pagging.currentPage - 1) * pagging.rowPerPage).toString());
        url.searchParams.set('rows', pagging.rowPerPage.toString());
        return this.http.get<ResultPagging>(url.href);
    }
}