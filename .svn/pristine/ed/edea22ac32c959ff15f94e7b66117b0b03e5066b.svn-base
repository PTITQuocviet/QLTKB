import { Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { ProjectModel } from './project.model';
import { ProjectService } from './project.service';
import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';
import { NgForm } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { PaggingService } from '../pagging/pagging.service';
import { PaggingModel } from '../shared/model/pagging.model';
import { ProjectSearchParamModel } from './project-search-param.model';

@Component({
  selector: 'app-project',
  templateUrl: './project.component.html',
  styleUrls: ['./project.component.css']
})
export class ProjectComponent implements OnInit {

  /** map code ra tên hiển thị trên giao diện */
  mapMLType = {
    'CLASSIFICATION': 'Classification',
    'REGRESSION': 'Regression',
    'CLUSTERING': 'Clustering'
  };

  /** map code ra tên hiển thị trên giao diện */
  mapStatus = {
    1: 'Active',
    2: 'Inactive'
  };

  @ViewChild('wrapper', { static: true }) wrapper: ElementRef;
  @ViewChild('formCreate', { static: true }) formCreate: ElementRef;
  @ViewChild('formFilter') formFilter: NgForm;
  @ViewChild('modalCreateProject', { static: true }) modalCreateProject: ElementRef;
  @ViewChild('modalEditProject', { static: true }) modalEditProject: ElementRef;

  projects: ProjectModel[] = [];
  closeModalResult = '';
  isCollapsedFilter = false;//trạng thái mở của khung filter project
  isEditProject = false;//kiểm tra modal đang xem hay đang sửa project
  editingProject: ProjectModel = null;

  constructor(private router: Router,
    private route: ActivatedRoute,
    private projectService: ProjectService,
    private modalService: NgbModal,
    private paggingService: PaggingService
  ) { }

  ngOnInit(): void {
    this.paggingService.pagging.subscribe((paggingModel) => {
      this.onSearch(paggingModel);
    });
  }

  /** 
   * Xử lý ấn nút tìm kiếm project
   */
  onSearch(pagging: PaggingModel) {
    if (!pagging) {
      pagging = this.paggingService.pagging.getValue();
    }
    let searchParam = new ProjectSearchParamModel();
    //TODO validate form và xử lý thêm các loại ở form

    if (!this.formFilter) {
      searchParam = searchParam.build(null);
    } else {
      searchParam = searchParam.build(this.formFilter.form.value);
    }
    this.projectService.requestSearch(pagging, searchParam)
      .subscribe(resultPagging => {
        this.projects = resultPagging.results;
      });
  }

  /**
   * Mở modal tạo project.
   */
  openModalCreateProject() {
    this.modalService.open(this.modalCreateProject, {})
      .result
      .then(
        (result) => {//Closed
          console.log(result);
          if (result === 'create') {//không dùng
            console.log(this.formCreate);
          }
        }, (reason) => {//Dismissed
          this.closeModalResult = `Dismissed ${this.getDismissModalReason(reason)}`;
          console.log(this.closeModalResult);
        });
  }

  /**
   * Mở modal xem và sửa project.
   * @param id id của project cần xem hoặc sửa.
   */
  openModalEditProject(id: string) {
    this.isEditProject = false;//mặc định là xem project với modal xem sửa project.

    //request thông tin project, lưu vào biến editingProject
    this.projectService.request(id).subscribe(result => {
      this.editingProject = result;
      this.editingProject.statusName = this.mapStatus[this.editingProject.status];

      // editingProject
      this.modalService.open(this.modalEditProject, { 'size': 'lg' })
        .result
        .then(
          (result) => {//Closed
            console.log(result);
            // if (result === 'edit') {
            //TODO gọi api sửa project
            //lấy thông tin từ form
            // console.log(id);
            // console.log(this.formCreate);

            // this.projectService.requestCreate()
            // }
          }, (reason) => {//Dismissed
            this.closeModalResult = `Dismissed ${this.getDismissModalReason(reason)}`;
            console.log(this.closeModalResult);
          });
    }, error => {
      console.log(error);
    });
  }

  private getDismissModalReason(reason: any): string {
    if (reason === ModalDismissReasons.ESC) {
      return 'by pressing ESC';
    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
      return 'by clicking on a backdrop';
    } else {
      return `with: ${reason}`;
    }
  }

  /**Ấn nút create project */
  onCreateProject(form: NgForm) {
    //TODO nếu tạo lỗi thì không đóng modal
    const project = new ProjectModel();
    project.name = form.value.projectName;
    project.mlType.type = form.value.mlType;
    project.description = form.value.description;
    project.status = form.value.status;

    this.projectService.requestCreate(project).subscribe(
      data => { console.log(data) }
      , error => { console.log(error) }
    )
  }

  /**Ấn nút edit project */
  onEditProject(form: NgForm) {
    //TODO nếu sửa lỗi thì không đóng modal
    const project = new ProjectModel();
    project.id = form.value.projectId;
    project.name = form.value.projectName;
    project.mlType.type = form.value.mlType;
    project.description = form.value.description;
    project.status = form.value.status;

    this.projectService.requestUpdate(project).subscribe(
      data => {
        this.editingProject = data;//cập nhật thông tin của project đang sửa

        this.modalEditProject.nativeElement.click();
      }
      , error => {
        console.log(error);
      }
    )
  }

  /**
   * Đổi sang trang quản trị của 1 project
   * @param id id của project cần maanage
   */
  onManageProject(id: string) {
    this.router.navigate(['project', id, 'dataset']);
  }
}
